#!/usr/bin/env python

import argparse # type: ignore
from datautils.json import jbro # type: ignore

################################################################################

if __name__ == '__main__':
    p = argparse.ArgumentParser(description='JSON browsing utility')

    # position args
    p.add_argument('filename', help='filename of JSON file')

    # flags
    flags = p.add_argument_group('flags')
    flags.add_argument('-q', '--quiet', action='store_true',
                       help='suppress output description')
    flags.add_argument('-t', '--truncate', action='store_true',
                       help='truncate output to < 80 chars')

    # optional args
    p.add_argument('-d', '--describe', action='store_true',
                   help='describe structure of file')
    p.add_argument('-s', '--sample', type=int, 
                   help='sample n (key, value) pairs from file')
    p.add_argument('-c', '--chars', type=int,
                   help='sample n chars from file')
    p.add_argument('-f', '--find',
                   help='find given key, nesting in form key1.key2')
    p.add_argument('-F', '--find_recursive',
                   help='find given key recursively (i.e. all occurrences)')
    p.add_argument('-k', '--keys', action='store_true',
                   help='list all keys at top level')
    p.add_argument('-K', '--keys_recursive', action='store_true',
                   help='list all keys recursively in form key1.key2')
    p.add_argument('-l', '--less', action='store_true',
                   help='pipe pretty print of file to less')

    args = p.parse_args()
    jbro.main(args)
